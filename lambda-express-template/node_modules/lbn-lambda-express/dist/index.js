"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExpressMiddleware_1 = require("./services/ExpressMiddleware");
const ExpressMiddlewareResponse_1 = require("./services/ExpressMiddlewareResponse");
const LambdaMiddlewareMapper_1 = require("./services/LambdaMiddlewareMapper");
/**
 * @Method: Returns the lambda handler with the express app setup
 */
exports.createLambdaHandler = (app) => (event) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.log("Event from Lambda: ", event);
        const mappedEvent = LambdaMiddlewareMapper_1.LambdaMiddlewareMapper.toMiddlewareRequest(event);
        console.log("Mapped event: ", mappedEvent);
        const mw = new ExpressMiddleware_1.ExpressMiddleware(app, mappedEvent, ExpressMiddlewareResponse_1.getMiddlewareResponse());
        const response = yield mw.execute();
        const mappedResponse = LambdaMiddlewareMapper_1.LambdaMiddlewareMapper.toLambdaResponse(response);
        console.log("Response: ", mappedResponse);
        return mappedResponse;
    }
    catch (err) {
        console.log("Error: ", err);
        const errorResponse = LambdaMiddlewareMapper_1.LambdaMiddlewareMapper.toLambdaResponse({
            body: Object.assign({}, err.body),
            headers: {},
            statusCode: err.statusCode || 400,
        });
        console.log("ErrorResponse: ", errorResponse);
        return errorResponse;
    }
});
